<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yiming Chen</title>
    <link>https://yiming.dev</link>
    <description>My rants against Life and Software.</description>
    <pubDate>Wed, 05 Feb 2020 22:51:49 CST</pubDate>
    <lastBuildDate>Wed, 05 Feb 2020 22:51:49 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Clippings of 2020 Jan</title>
      <link>https://yiming.dev/clipping/2020/02/04/clippings-of-2020-jan</link>
      <description><![CDATA[The top 5 articles from all I've read in Jan, 2020. Topics include communicatiton, goal-setting, testing, object-oriented programming, and domain-driven design.]]></description>
      <content:encoded><![CDATA[<section id="content" role="main">
    <div id="post-container">
        <h1>Clippings of 2020 Jan</h1>
        
<div id="outline-container-orgbf8aba0" class="outline-2">
<h2 id="orgbf8aba0"><a href="https://www.rightattitudes.com/2017/06/16/rapoport-rules-criticism/">Rapoport‚Äôs Rules to Criticize Someone Constructively</a></h2>
<div class="outline-text-2" id="text-orgbf8aba0">
<blockquote>
<ol class="org-ol">
<li>You should attempt to re-express your target‚Äôs position so clearly, vividly, and fairly that your target says, ‚ÄúThanks, I wish I‚Äôd thought of putting it that way.‚Äù</li>
<li>You should list any points of agreement (especially if they are not matters of general or widespread agreement).</li>
<li>You should mention anything you have learned from your target.</li>
<li>Only then are you permitted to say so much as a word of rebuttal or criticism.</li>
</ol>
</blockquote>
<p>
As I mentioned in <a href="https://yiming.dev/blog/2019/06/24/life-changing-tools-book-review-non-violent-communication/">my Review for Nonviolent Communication</a>, NVC still feels a bit vague for me even after reading the book.
Because I still don't know exactly how to apply NVC in my life.
</p>

<p>
Rapoport's Rules to Criticize, on the other hand, is such a practical steps to follow.
And I can tell from my experience that it definitely works.
Before learning Rapoport's Rules, I've been using similar techniques already:
I always try to re-express what I received and what I agree before I say what I don't.
And most of the time, people would accept my opinions better.
</p>

<p>
After learning Rapoport's Rules, I would re-express more and start mentioning what I've learned.
Maybe you can do the same and see if it helps with your communication?
</p>
</div>
</div>

<div id="outline-container-orgbc08eb1" class="outline-2">
<h2 id="orgbc08eb1"><a href="https://t.co/UkYsUjQ2TO">I‚Äôve never had a goal - Signal v. Noise</a></h2>
<div class="outline-text-2" id="text-orgbc08eb1">
<blockquote>
<ul class="org-ul">
<li>A goal is something that goes away when you hit it.
<ul class="org-ul">
<li>Once you‚Äôve reached it, it‚Äôs gone.</li>
<li>You could always set another one, but I just don‚Äôt function in steps like that.</li>
</ul></li>
<li>I just worked at whatever I was working on and ended up wherever I am.</li>
</ul>
</blockquote>

<p>
As I learn to become goal-driven (a.k.a <a href="https://yiming.dev/blog/2019/12/31/growing-a-result-driven-mindset/">result-driven</a>), I am also aware of the downside of goals:
setting goals in itself doesn't mean anything, <b>what really matters is execution.</b>
</p>

<p>
Another interesting quote from this article is:
</p>
<blockquote>
<p>
The reason that most of us are unhappy most of the time is that we set our goals not for the person we‚Äôre going to be when we reach them, but we set our goals for the person we are when we set them.
</p>
</blockquote>
<p>
From my current understanding, it's impossible to "set our goals not for the person we‚Äôre going to be when we reach them".
So shall we stop setting goals once and for all?
</p>

<p>
That being said, I still believe in the power of goals: <a href="http://billhennessy.com/simple-strategies/2015/09/09/i-wish-drucker-never-said-it">what gets measured gets managed</a>.
What we need to do is to set goals for what really matters to us.
Use a few goals to help us focus on things really matter.
And learn the goal-setting skills from practices.
</p>
</div>
</div>
<div id="outline-container-org2e21aa0" class="outline-2">
<h2 id="org2e21aa0"><a href="https://thoughtbot.com/blog/the-case-for-wet-tests">The Case for WET Tests</a></h2>
<div class="outline-text-2" id="text-org2e21aa0">
<blockquote>
<ul class="org-ul">
<li>Writing tests that scale with your team
<ul class="org-ul">
<li>Abstractions can be useful tools</li>
<li>Abstractions can also increase the cognitive load on the next person to work with your code</li>
</ul></li>
<li>Minimizing dependencies between tests</li>
<li>Requirements change, abstractions break</li>
<li>Writing untested logic
<ul class="org-ul">
<li>we shouldn‚Äôt spend time testing that language features work as expected</li>
</ul></li>
<li>Making the right abstractions
<ul class="org-ul">
<li>DRY test code should be a means to achieving the goals of your test suite, rather than a goal in and of itself.</li>
</ul></li>
</ul>
</blockquote>
<p>
When writing tests, we should strive for being <a href="https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests">DAMP (Descriptive And Meaningful Phrases)</a>, rather than DRY (Don't Repeat Yourself).
It's way easier to build a <a href="https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction">Wrong Abstraction</a> when writing tests.
And it doesn't cost much to have duplicated code in our tests.
</p>
</div>
</div>
<div id="outline-container-org4483990" class="outline-2">
<h2 id="org4483990"><a href="https://www.youtube.com/watch?v=_f2LYPpueAY&amp;feature=share">RubyConf 2018 - Inheritance, Composition, Ruby and You by Cody Stringham - YouTube</a></h2>
<div class="outline-text-2" id="text-org4483990">
<blockquote>
<ul class="org-ul">
<li>Inheritance
<ul class="org-ul">
<li>When?
<b>Object Specialization</b>
<ul class="org-ul">
<li>A child should be a specialized version of its parent</li>
<li>Not to share behaviour</li>
</ul></li>
<li>Pros (when done correctly)
<ul class="org-ul">
<li>Reusable</li>
<li>Extensible</li>
</ul></li>
<li>Cons
<ul class="org-ul">
<li>Coupling</li>
<li>Reduced Readability</li>
<li>Easy to Abuse</li>
<li>Complicates Unit Testing
<ul class="org-ul">
<li>subclasses are not fully tested</li>
<li>if someone changes superclass and its tests, tests would pass, but the behaviours of subclasses are changed</li>
</ul></li>
</ul></li>
</ul></li>
<li>Composition
<ul class="org-ul">
<li>When?
<b>As much as possible!</b>
<ul class="org-ul">
<li>Small classes</li>
<li>Small methods</li>
</ul></li>
<li>Pros
<ul class="org-ul">
<li>Flexible</li>
<li>Readable</li>
<li>Easily Testable</li>
</ul></li>
<li>Cons
<ul class="org-ul">
<li>More boilerplate</li>
</ul></li>
</ul></li>
</ul>
</blockquote>

<p>
I spent quite some time to understand "Composition over Inheritance".
Because when I first started learning Object-Oriented Programming, it was one of the core concepts I learned.
After reading many articles and books, I was convinced that Composition is actually better.
This talk is the best resource you can learn about this idea.
</p>

<p>
If you want to learn more about "Composition over Inheritance", these are some great reads:
</p>
<ul class="org-ul">
<li><a href="https://twitter.com/mfeathers/status/994661651466010624">Michael Feathers on Twitter: "Inheritance might be the most unjustly maligned language feature."</a></li>
<li><a href="http://www.yegor256.com/2016/09/13/inheritance-is-procedural.html">Inheritance Is a Procedural Technique for Code Reuse</a></li>
<li><a href="http://mjk.space/how-to-avoid-inheritance-in-ruby/">How to avoid inheritance in Ruby? ‚Äì Micha≈Ç Konarski</a></li>
<li><a href="http://softwareengineering.stackexchange.com/questions/134097/why-should-i-prefer-composition-over-inheritance">interfaces - Why should I prefer composition over inheritance? - Software Engineering Stack Exchange</a></li>
</ul>
</div>
</div>

<div id="outline-container-org002f20c" class="outline-2">
<h2 id="org002f20c"><a href="https://dev.to/kmruiz/to-domain-driven-design-6ao">To Domain Driven Design - DEV Community üë©‚Äçüíªüë®‚Äçüíª</a></h2>
<div class="outline-text-2" id="text-org002f20c">
<blockquote>
<ul class="org-ul">
<li><b>split your achitecture based on knowledge, not on data.</b>
<ul class="org-ul">
<li>How a company structures knowledge depends entirely on the people and the business they are on</li>
<li>think in our business as a business platform:
<ul class="org-ul">
<li>we don't have a product, we have a set of products.</li>
<li>Those products are a set of features that apply to a persona.</li>
</ul></li>
</ul></li>
<li>Summary
<ul class="org-ul">
<li>Thinking in platforms allows us to split our business better.</li>
<li>Linking products to personas and also to bounded contexts makes boundaries explicit.</li>
<li>State-sourcing and event-driven architectures are essential for building distributed and available platforms.</li>
<li>Teams should not share code, but a common platform.</li>
</ul></li>
</ul>
</blockquote>
<p>
How to design a architecture optimized for long-term evolution is the core of software design.
This article provides a practical example to explain how to split domains based on knowledge, rather than data.
</p>
</div>
</div>

    </div>
</section>
]]></content:encoded>
      <pubDate>2020-02-05</pubDate>
      <guid>https://yiming.dev/clipping/2020/02/04/clippings-of-2020-jan</guid>
    </item>
    <item>
      <title>Clippings of 2019 Dec</title>
      <link>https://yiming.dev/clipping/2020/01/23/clippings-of-2019-dec</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-01-26</pubDate>
      <guid>https://yiming.dev/clipping/2020/01/23/clippings-of-2019-dec</guid>
    </item>
    <item>
      <title>Ê≤°Êúâ ifÔºåÊÄé‰πàÂÜô‰ª£Á†ÅÔºü - GDCR 2019</title>
      <link>https://yiming.dev/blog/2020/01/15/gdcr-shanghai-summary-how-to-write-code-without-any-if-statement</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-01-21</pubDate>
      <guid>https://yiming.dev/blog/2020/01/15/gdcr-shanghai-summary-how-to-write-code-without-any-if-statement</guid>
    </item>
    <item>
      <title>How to Partially Restore a PostgreSQL Database?</title>
      <link>https://yiming.dev/blog/2020/01/13/how-to-partially-restore-a-postgre-sql-database</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-01-14</pubDate>
      <guid>https://yiming.dev/blog/2020/01/13/how-to-partially-restore-a-postgre-sql-database</guid>
    </item>
    <item>
      <title>How to Write Elixiry Ruby - Result Object</title>
      <link>https://yiming.dev/blog/2020/01/06/how-to-write-elixiry-ruby-result-object</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2020-01-08</pubDate>
      <guid>https://yiming.dev/blog/2020/01/06/how-to-write-elixiry-ruby-result-object</guid>
    </item>
    <item>
      <title>Growing a Result-Driven Mindset</title>
      <link>https://yiming.dev/blog/2019/12/31/growing-a-result-driven-mindset</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2019-12-31</pubDate>
      <guid>https://yiming.dev/blog/2019/12/31/growing-a-result-driven-mindset</guid>
    </item>
    <item>
      <title>‰ªéÂçïÂÖÉÊµãËØïÂà∞ÈõÜÊàêÊµãËØï - GDCR 2019</title>
      <link>https://yiming.dev/blog/2019/12/27/gdcr-shanghai-summary-unit-tests-vs-integration-tests</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2019-12-29</pubDate>
      <guid>https://yiming.dev/blog/2019/12/27/gdcr-shanghai-summary-unit-tests-vs-integration-tests</guid>
    </item>
    <item>
      <title>Clippings of 2019 Nov</title>
      <link>https://yiming.dev/clipping/2019/12/04/clippings-of-2019-nov</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2019-12-20</pubDate>
      <guid>https://yiming.dev/clipping/2019/12/04/clippings-of-2019-nov</guid>
    </item>
    <item>
      <title>Why do we need OKR (Objectives and Key Results)?</title>
      <link>https://yiming.dev/blog/2019/12/17/why-do-we-need-okr-objectives-and-key-results</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2019-12-17</pubDate>
      <guid>https://yiming.dev/blog/2019/12/17/why-do-we-need-okr-objectives-and-key-results</guid>
    </item>
    <item>
      <title>ÁªìÂØπÁºñÁ®ãÊó∂ÊÄùË∑Ø‰∏çÂêåÔºåÊÄé‰πàÂäûÔºü - GDCR 2019</title>
      <link>https://yiming.dev/blog/2019/12/03/gdcr-shanghai-summary-pair-programming</link>
      <description><![CDATA[]]></description>
      <content:encoded><![CDATA[]]></content:encoded>
      <pubDate>2019-12-04</pubDate>
      <guid>https://yiming.dev/blog/2019/12/03/gdcr-shanghai-summary-pair-programming</guid>
    </item>
  </channel>
</rss>